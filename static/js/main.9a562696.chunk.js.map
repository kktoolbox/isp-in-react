{"version":3,"sources":["components/NoteAdminModal.js","components/NoteCard.js","components/NoteListItem.js","components/NoteModal.js","components/NoteCollection.js","util/data.js","containers/NoteCollection.js","pages/NotePage.js","App.js","serviceWorker.js","index.js"],"names":["NoteAdminModal","triggerText","onSubmit","useState","visible","setVisible","loading","setLoading","formRef","useRef","inputTitleRef","inputTagsRef","inputContentRef","Button","onClick","Modal","show","onHide","Header","Body","Form","ref","Group","controlId","Label","Control","type","as","rows","Footer","variant","disabled","onSuccess","current","reset","onError","error","console","values","title","value","tags","content","className","NoteCard","abstract","Card","Title","Subtitle","map","tag","Badge","key","id","pill","name","NoteListItem","ListGroup","Item","NoteModal","children","handleDelete","useContext","NoteContext","NoteCollection","notes","activeKey","setActiveKey","Tabs","onSelect","Tab","eventKey","note","Row","Col","xs","md","lg","fetchNotes","JSON","parse","localStorage","getItem","createContext","setNotes","useEffect","onFinally","Promise","resolve","reject","setTimeout","filter","setItem","stringify","deleteNote","then","body","catch","finally","Provider","sort","a","b","lastUpdate","split","index","timestamp","Date","now","push","slice","createNote","onDelete","NotePage","Container","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a562696.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { Button, Form, Modal } from 'react-bootstrap'\n\nconst NoteAdminModal = ({ triggerText, onSubmit }) => {\n  const [visible, setVisible] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  const formRef = useRef(null)\n  const inputTitleRef = useRef(null)\n  const inputTagsRef = useRef(null)\n  const inputContentRef = useRef(null)\n\n  const handleSubmit = () => {\n    setLoading(true)\n\n    onSubmit &&\n      onSubmit({\n        onSuccess: () => {\n          formRef.current.reset()\n          setLoading(false)\n          setVisible(false)\n        },\n        onError: error => {\n          setLoading(false)\n          console.error(error)\n        },\n        values: {\n          title: inputTitleRef.current.value,\n          tags: inputTagsRef.current.value,\n          content: inputContentRef.current.value,\n        },\n      })\n  }\n\n  return (\n    <>\n      <Button onClick={() => setVisible(true)}>{triggerText}</Button>\n\n      <Modal show={visible} onHide={() => setVisible(false)}>\n        <Modal.Header>{triggerText}</Modal.Header>\n\n        <Modal.Body>\n          <Form ref={formRef}>\n            <Form.Group controlId=\"note-title\">\n              <Form.Label>Title</Form.Label>\n              <Form.Control ref={inputTitleRef} type=\"text\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"note-tags\">\n              <Form.Label>Tags</Form.Label>\n              <Form.Control ref={inputTagsRef} type=\"text\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"note-content\">\n              <Form.Label>Content</Form.Label>\n              <Form.Control ref={inputContentRef} as=\"textarea\" rows=\"5\" />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setVisible(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" disabled={loading} onClick={() => handleSubmit()}>\n            {loading ? <i className=\"fas fa-spinner fa-pulse\" /> : 'Confirm'}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default NoteAdminModal\n","import React from 'react'\nimport { Badge, Card } from 'react-bootstrap'\n\nconst NoteCard = ({ title, tags, abstract }) => {\n  return (\n    <Card className=\"cursor-pointer\">\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n\n        <Card.Subtitle className=\"mb-2\">\n          {tags.map(tag => (\n            <Badge key={tag.id} pill variant=\"primary\" className=\"mr-2\">\n              {tag.name}\n            </Badge>\n          ))}\n        </Card.Subtitle>\n\n        <span>{abstract}</span>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default NoteCard\n","import React from 'react'\nimport { Badge, ListGroup } from 'react-bootstrap'\n\nconst NoteListItem = ({ title, tags }) => {\n  return (\n    <ListGroup.Item>\n      <span className=\"mr-4\">{title}</span>\n\n      {tags.map(tag => (\n        <Badge key={tag.id} pill variant=\"primary\" className=\"mr-2\">\n          {tag.name}\n        </Badge>\n      ))}\n    </ListGroup.Item>\n  )\n}\n\nexport default NoteListItem\n","import React, { useContext, useState } from 'react'\nimport { Badge, Button, Modal } from 'react-bootstrap'\nimport { NoteContext } from '../containers/NoteCollection'\n\nconst NoteModal = ({ children, id, title, tags, content }) => {\n  const { handleDelete } = useContext(NoteContext)\n\n  const [visible, setVisible] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <>\n      <div className=\"cursor-pointer\" onClick={() => setVisible(true)}>\n        {children}\n      </div>\n\n      <Modal show={visible} onHide={() => setVisible(false)}>\n        <Modal.Header>{title}</Modal.Header>\n\n        <Modal.Body>\n          <div className=\"mb-4\">\n            {tags.map(tag => (\n              <Badge key={tag.id} pill variant=\"primary\" className=\"mr-2\">\n                {tag.name}\n              </Badge>\n            ))}\n          </div>\n          <div>{content}</div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            variant=\"danger\"\n            disabled={loading}\n            onClick={() => {\n              setLoading(true)\n\n              handleDelete({\n                onError: () => {\n                  setLoading(false)\n                },\n                id,\n              })\n            }}\n          >\n            {loading ? <i className=\"fas fa-spinner fa-pulse\" /> : <i className=\"fas fa-trash-alt\" />}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default NoteModal\n","import React, { useState } from 'react'\nimport { Col, ListGroup, Row, Tab, Tabs } from 'react-bootstrap'\nimport NoteAdminModal from './NoteAdminModal'\nimport NoteCard from './NoteCard'\nimport NoteListItem from './NoteListItem'\nimport NoteModal from './NoteModal'\n\nconst NoteCollection = ({ notes, onSubmit }) => {\n  const [activeKey, setActiveKey] = useState('list') // list-group, cards\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <NoteAdminModal triggerText=\"New Note\" onSubmit={onSubmit} />\n      </div>\n\n      <Tabs id=\"controlled-tab-example\" activeKey={activeKey} onSelect={key => setActiveKey(key)}>\n        <Tab eventKey=\"list\" title=\"List\" className=\"py-4\">\n          <ListGroup>\n            {notes.map(note => (\n              <NoteModal key={note.id} {...note}>\n                <NoteListItem {...note} />\n              </NoteModal>\n            ))}\n          </ListGroup>\n        </Tab>\n        <Tab eventKey=\"card\" title=\"Card\" className=\"py-4\">\n          <Row>\n            {notes.map(note => (\n              <Col key={note.id} xs={12} md={6} lg={4} className=\"mb-3\">\n                <NoteModal key={note.id} {...note}>\n                  <NoteCard {...note} />\n                </NoteModal>\n              </Col>\n            ))}\n          </Row>\n        </Tab>\n      </Tabs>\n    </>\n  )\n}\n\nexport default NoteCollection\n","export const fetchNotes = () => {\n  try {\n    return JSON.parse(localStorage.getItem('notes') || '[]')\n  } catch (error) {\n    process.env.NODE_ENV === 'development' && console.error(error)\n    return []\n  }\n}\n\nexport const createNote = values => {\n  const timestamp = Date.now()\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const notes = fetchNotes()\n\n        notes.push({\n          id: `note-${timestamp}`,\n          lastUpdate: timestamp,\n          title: values.title,\n          tags: values.tags,\n          abstract: values.content.slice(0, 30),\n          content: values.content,\n        })\n\n        localStorage.setItem('notes', JSON.stringify(notes))\n\n        resolve('200 ok')\n      } catch (error) {\n        reject(error)\n      }\n    }, 2000)\n  })\n}\n\nexport const updateNote = values => {\n  const timestamp = Date.now()\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const notes = fetchNotes()\n\n      const targetIndex = notes.findIndex(note => note.id === values.id)\n\n      if (targetIndex === -1) {\n        reject(new Error('target not found'))\n      }\n\n      notes[targetIndex] = {\n        ...notes[targetIndex],\n        ...values,\n        lastUpdate: timestamp,\n      }\n\n      localStorage.setItem('notes', JSON.stringify(notes))\n\n      resolve('200 ok')\n    }, 2000)\n  })\n}\n\nexport const deleteNote = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const notes = fetchNotes().filter(note => note.id !== id)\n\n        localStorage.setItem('notes', JSON.stringify(notes))\n\n        resolve('200 ok')\n      } catch (error) {\n        reject(error)\n      }\n    }, 2000)\n  })\n}\n","import React, { createContext, useEffect, useState } from 'react'\nimport NoteCollectionComponent from '../components/NoteCollection'\nimport { createNote, deleteNote, fetchNotes } from '../util/data'\n\nexport const NoteContext = createContext({\n  handleDelete: null,\n})\n\nconst NoteCollection = () => {\n  const [notes, setNotes] = useState([])\n\n  useEffect(() => {\n    setNotes(fetchNotes())\n  }, [])\n\n  const handleSubmit = ({ onSuccess, onError, onFinally, values }) => {\n    createNote(values)\n      .then(body => {\n        setNotes(fetchNotes())\n        onSuccess && onSuccess(body)\n      })\n      .catch(error => onError && onError(error))\n      .finally(() => onFinally && onFinally())\n  }\n\n  const handleDelete = ({ onSuccess, onError, onFinally, id }) => {\n    deleteNote(id)\n      .then(body => {\n        setNotes(fetchNotes())\n        onSuccess && onSuccess(body)\n      })\n      .catch(error => onError && onError(error))\n      .finally(() => onFinally && onFinally())\n  }\n\n  return (\n    <NoteContext.Provider value={{ handleDelete }}>\n      <NoteCollectionComponent\n        notes={notes\n          .sort((a, b) => b.lastUpdate - a.lastUpdate)\n          .map(note => ({\n            ...note,\n            tags: note.tags\n              .split(' ')\n              .sort()\n              .map((name, index) => ({\n                id: `${name}-${index}`,\n                name,\n              })),\n          }))}\n        onSubmit={handleSubmit}\n        onDelete={handleDelete}\n      />\n    </NoteContext.Provider>\n  )\n}\n\nexport default NoteCollection\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport NoteCollection from '../containers/NoteCollection'\n\nconst NotePage = () => {\n  return (\n    <Container className=\"py-5\">\n      <h1 className=\"mb-5\">\n        <i className=\"fas fa-book mr-2\" />\n        <span>Notebook</span>\n      </h1>\n\n      <NoteCollection />\n    </Container>\n  )\n}\n\nexport default NotePage\n","import React from 'react'\nimport { hot } from 'react-hot-loader/root'\nimport NotePage from './pages/NotePage'\n\nconst App = () => {\n  return (\n    <div id=\"app\">\n      <NotePage />\n    </div>\n  )\n}\n\nexport default process.env.NODE_ENV === 'development' ? hot(App) : App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { register } from './serviceWorker'\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nregister()\n"],"sourceRoot":""}