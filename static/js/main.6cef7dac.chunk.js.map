{"version":3,"sources":["components/CategoryBadge.tsx","components/NoteCard.tsx","components/NoteCreationForm.tsx","components/NoteModal.tsx","components/NoteCollection.tsx","utils/data.ts","containers/NoteCollection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CategoryBadge","id","name","Badge","variant","className","NoteCard","title","categories","abstract","Card","Body","Title","map","category","key","Text","NoteCreationForm","onCreate","formRef","useRef","titleInputRef","categoriesInputRef","contentTextAreaRef","useState","loading","setLoading","Form","ref","Group","Label","Control","placeholder","as","rows","Button","disabled","onClick","values","current","value","content","onSuccess","reset","onError","error","console","onFinally","NoteModal","renderTrigger","handleDelete","useContext","NoteContext","visible","setVisible","Modal","show","onHide","Header","closeButton","Footer","NoteCollection","notes","note","fetchNotes","Promise","resolve","reject","setTimeout","JSON","parse","localStorage","getItem","createContext","notesRaw","setnotesRaw","useEffect","then","split","lastUpdate","Provider","filter","setItem","stringify","deleteNote","catch","finally","timestamp","Date","now","push","slice","createNote","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cef7dac.chunk.js","sourcesContent":["import React from 'react'\nimport { Badge } from 'react-bootstrap'\n\n// TODO: 1-1 define props of category\nexport type CategoryProps = {\n  id: string\n  name: string\n}\n\n// TODO: 1-2 extend types of funcitonal component\nconst CategoryBadge: React.FC<CategoryProps> = ({ id, name }) => {\n  // TODO: 1-3 implement structures of category badge\n  return (\n    <Badge variant=\"primary\" className=\"mr-2\">\n      {name}\n    </Badge>\n  )\n}\n\nexport default CategoryBadge\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport CategoryBadge, { CategoryProps } from './CategoryBadge'\n\n// TODO: 2-1 define props of note\nexport type NoteProps = {\n  id: string\n  lastUpdate: number\n  content: string\n\n  title: string\n  categories: CategoryProps[]\n  abstract: string\n}\n\n// TODO: 2-2 extend types of functional component\nconst NoteCard: React.FC<NoteProps> = ({ title, categories, abstract }) => {\n  // TODO: 2-3 implement structures of note card\n  // * hint: use CategoryBadge to display categories\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <div className=\"mb-4\">\n          {categories.map(category => (\n            <CategoryBadge key={category.id} id={category.id} name={category.name} />\n          ))}\n        </div>\n        <Card.Text>{abstract}</Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default NoteCard\n","import React, { useRef, useState } from 'react'\nimport { Button, Form, FormControl } from 'react-bootstrap'\n\nexport type CreateCardEvent = (props: {\n  values: {\n    title: string\n    categories: string // ! warning: this is a string\n    content: string\n  }\n  onSuccess?: () => void\n  onError?: (error: Error) => void\n  onFinally?: () => void\n}) => void\n\nconst NoteCreationForm: React.FC<{\n  onCreate?: CreateCardEvent\n}> = ({ onCreate }) => {\n  const formRef = useRef<Form<'form'> & HTMLFormElement>(null)\n  const titleInputRef = useRef<FormControl<'input'> & HTMLInputElement>(null)\n  const categoriesInputRef = useRef<FormControl<'input'> & HTMLInputElement>(null) // ! warning: this is a text input\n  const contentTextAreaRef = useRef<FormControl<'textarea'> & HTMLTextAreaElement>(null)\n\n  const [loading, setLoading] = useState<boolean>(false)\n\n  // TODO: 4-2 implement handle function of form submit event\n  // * hint:\n  // * * <form ref={formRef} />\n  // * * formRef.current.reset()\n  const handleSubmit = () => {\n    setLoading(true)\n\n    onCreate &&\n      onCreate({\n        values: {\n          title: !!titleInputRef.current ? titleInputRef.current.value : '',\n          categories: !!categoriesInputRef.current ? categoriesInputRef.current.value : '',\n          content: !!contentTextAreaRef.current ? contentTextAreaRef.current.value : '',\n        },\n        onSuccess: () => {\n          !!formRef.current && formRef.current.reset()\n        },\n        onError: error => {\n          console.error(error)\n        },\n        onFinally: () => {\n          setLoading(false)\n        },\n      })\n  }\n\n  // TODO: 4-1 implement structures of note creation form\n  // * hint: React Bootstrap Forms\n  // * <Form /> <Form.Group />, <Form.Label />, <Form.Control />\n  return (\n    <Form ref={formRef}>\n      <Form.Group>\n        <Form.Label>Title</Form.Label>\n        <Form.Control ref={titleInputRef} placeholder=\"title\" />\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label>Category</Form.Label>\n        <Form.Control ref={categoriesInputRef} placeholder=\"category\" />\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label>Content</Form.Label>\n        <Form.Control ref={contentTextAreaRef} placeholder=\"content\" as=\"textarea\" rows={5} />\n      </Form.Group>\n\n      <div className=\"text-right\">\n        <Button variant=\"primary\" disabled={loading} onClick={() => handleSubmit()}>\n          {loading ? <i className=\"fas fa-spinner fa-pulse\" /> : 'Create'}\n        </Button>\n      </div>\n    </Form>\n  )\n}\n\nexport default NoteCreationForm\n","import React, { useContext, useState } from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { NoteContext } from '../containers/NoteCollection'\nimport CategoryBadge, { CategoryProps } from './CategoryBadge'\n\n// TODO: 5-1 define props of note modal\nexport type NoteModalProps = {\n  renderTrigger?: React.ReactNode\n  id: string\n  title: string\n  categories: CategoryProps[]\n  content: string\n}\n\nconst NoteModal: React.FC<NoteModalProps> = ({ renderTrigger, id, title, categories, content }) => {\n  // TODO EXTRA: 6-4 use context\n  const { handleDelete } = useContext(NoteContext)\n\n  const [visible, setVisible] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  // TODO EXTRA: 6-5 handle delete event\n  const handleClick = () => {\n    setLoading(true)\n    handleDelete &&\n      handleDelete({\n        id,\n        onError: () => setLoading(false),\n      })\n  }\n\n  // TODO: 5-2 implement structures of note modal\n  // * hints: usage of modal\n  // * <NoteModal renderTrigger={<NoteCard />} />\n  return (\n    <>\n      {renderTrigger && (\n        <div className=\"cursor-pointer\" onClick={() => setVisible(true)}>\n          {renderTrigger}\n        </div>\n      )}\n\n      <Modal show={visible} onHide={() => setVisible(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"mb-4\">\n            {categories.map(category => (\n              <CategoryBadge key={category.id} {...category} />\n            ))}\n          </div>\n          <div>{content}</div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" disabled={loading} onClick={handleClick}>\n            {loading ? <i className=\"fas fa-spinner fa-pulse\" /> : <i className=\"fas fa-trash-alt\" />}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default NoteModal\n","import React from 'react'\nimport NoteCard, { NoteProps } from './NoteCard'\nimport NoteCreationForm, { CreateCardEvent } from './NoteCreationForm'\nimport NoteModal from './NoteModal'\n\nconst NoteCollection: React.FC<{\n  notes: NoteProps[]\n  onCreate?: CreateCardEvent\n}> = ({ notes, onCreate }) => {\n  return (\n    <div className=\"row py-5\">\n      {/* // TODO: 3-2 use NoteCard to display notes */}\n      <div className=\"col-6\">\n        {notes.map(note => (\n          <div key={note.id} className=\"mb-4\">\n            <NoteModal {...note} renderTrigger={<NoteCard {...note} />} />\n          </div>\n        ))}\n      </div>\n\n      <div className=\"col-6\">\n        <NoteCreationForm onCreate={onCreate} />\n      </div>\n    </div>\n  )\n}\n\nexport default NoteCollection\n","export type NoteDataProps = {\n  id: string\n  title: string\n  categories: string\n  content: string\n  abstract?: string\n  lastUpdate?: number\n}\n\nexport const fetchNotes: () => Promise<NoteDataProps[]> = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const notes: NoteDataProps[] = JSON.parse(localStorage.getItem('notes') || '[]') as NoteDataProps[]\n        resolve(notes)\n      } catch (error) {\n        console.error(error)\n        resolve([])\n      }\n    }, 1000)\n  })\n}\n\nexport const createNote: (values: { title: string; categories: string; content: string }) => Promise<string> = ({\n  title,\n  categories,\n  content,\n}) => {\n  const timestamp = Date.now()\n\n  return new Promise<string>((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const notes: NoteDataProps[] = JSON.parse(localStorage.getItem('notes') || '[]') as NoteDataProps[]\n\n        notes.push({\n          id: `note-${timestamp}`,\n          title: title,\n          categories: categories,\n          abstract: content.slice(0, 30),\n          content: content,\n          lastUpdate: timestamp,\n        })\n\n        localStorage.setItem('notes', JSON.stringify(notes))\n\n        resolve('200 ok')\n      } catch (error) {\n        reject(error)\n      }\n    }, 2000)\n  })\n}\n\nexport const updateNote: (values: {\n  id: string\n  title?: string\n  categories?: string\n  content?: string\n}) => Promise<string> = ({ id, title, categories, content }) => {\n  const timestamp = Date.now()\n\n  return new Promise<string>((resolve, reject) => {\n    setTimeout(() => {\n      const notes: NoteDataProps[] = JSON.parse(localStorage.getItem('notes') || '[]') as NoteDataProps[]\n\n      const targetIndex = notes.findIndex(note => note.id === id)\n\n      if (targetIndex === -1) {\n        reject(new Error('target not found'))\n      }\n\n      notes[targetIndex] = {\n        id,\n        title: title || notes[targetIndex].title,\n        categories: categories || notes[targetIndex].categories,\n        content: content || notes[targetIndex].content,\n        lastUpdate: timestamp,\n      }\n\n      localStorage.setItem('notes', JSON.stringify(notes))\n\n      resolve('200 ok')\n    }, 2000)\n  })\n}\n\nexport const deleteNote: (id: string) => Promise<string> = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const notes: NoteDataProps[] = (JSON.parse(localStorage.getItem('notes') || '[]') as NoteDataProps[]).filter(\n          note => note.id !== id,\n        )\n\n        localStorage.setItem('notes', JSON.stringify(notes))\n\n        resolve('200 ok')\n      } catch (error) {\n        reject(error)\n      }\n    }, 2000)\n  })\n}\n","import React, { createContext, useEffect, useState } from 'react'\nimport { NoteProps } from '../components/NoteCard'\nimport NoteCollectionComponent from '../components/NoteCollection'\nimport { CreateCardEvent } from '../components/NoteCreationForm'\nimport { createNote, deleteNote, fetchNotes, NoteDataProps } from '../utils/data'\n\nexport type DeleteNoteEvent = (props: {\n  id: string\n  onSuccess?: () => void\n  onError?: (error: Error) => void\n  onFinally?: () => void\n}) => void\n\n// TODO EXTRA: 6-1 create context of note\nexport const NoteContext = createContext<{\n  handleDelete: DeleteNoteEvent | null\n}>({\n  handleDelete: null,\n})\n\nconst NoteCollection: React.FC = () => {\n  const [notesRaw, setnotesRaw] = useState<NoteDataProps[]>([])\n\n  useEffect(() => {\n    // TODO: 3-1 add fake data of notes\n    // setNotes([\n    //   {\n    //     id: 'note-1576345856232',\n    //     lastUpdate: 1576345856232,\n    //     title: '小行星2814',\n    //     categories: [\n    //       {\n    //         id: 'category-random',\n    //         name: 'random',\n    //       },\n    //       {\n    //         id: 'category-space',\n    //         name: 'space',\n    //       },\n    //       {\n    //         id: 'category-wiki',\n    //         name: 'wiki',\n    //       },\n    //     ],\n    //     abstract: '小行星2814（英語：2814 Vieira）是一顆圍繞太陽',\n    //     content:\n    //       '小行星2814（英語：2814 Vieira）是一顆圍繞太陽公轉的小行星。1982年3月18日，亨利·德波鴻諾在拉西拉天文台發現了此天體[1][2]。\\n\\nhttps://zh.wikipedia.org/wiki/%E5%B0%8F%E8%A1%8C%E6%98%9F2814',\n    //   },\n    //   {\n    //     id: 'note-1576345902001',\n    //     lastUpdate: 1576345902001,\n    //     title: '卡西諾戰役',\n    //     categories: [\n    //       {\n    //         id: 'category-random',\n    //         name: 'random',\n    //       },\n    //       {\n    //         id: 'category-war',\n    //         name: 'war',\n    //       },\n    //       {\n    //         id: 'category-wiki',\n    //         name: 'wiki',\n    //       },\n    //     ],\n    //     abstract: '卡西諾山戰役（也稱為「羅馬戰役」及「卡西諾戰役」）是第二次世',\n    //     content:\n    //       '卡西諾山戰役（也稱為「羅馬戰役」及「卡西諾戰役」）是第二次世界大戰期間盟軍為突破冬季防線發動的一系列共4場高昂代價的戰役，其目的是突進至羅馬。\\n\\nhttps://zh.wikipedia.org/wiki/%E5%8D%A1%E8%A5%BF%E8%AB%BE%E6%88%B0%E5%BD%B9',\n    //   },\n    // ])\n\n    // TODO: 3-3 fetch notes from data API (./util/data.ts)\n    fetchNotes().then(notesRaw => {\n      setnotesRaw(notesRaw)\n    })\n  }, [])\n\n  // TODO: 4-3 implement handle function of create note event (./util/data.ts)\n  const handleCreate: CreateCardEvent = ({ values, onSuccess, onError, onFinally }) => {\n    createNote({\n      title: values.title,\n      categories: values.categories,\n      content: values.content,\n    })\n      .then(() => {\n        fetchNotes().then(notesRaw => {\n          setnotesRaw(notesRaw)\n        })\n        onSuccess && onSuccess()\n      })\n      .catch(error => onError && onError(error))\n      .finally(() => onFinally && onFinally())\n  }\n\n  // TODO EXTRA: 6-3 implement handle function of delete note event (use react context api)\n  const handleDelete: DeleteNoteEvent = ({ id, onSuccess, onError, onFinally }) => {\n    deleteNote(id)\n      .then(() => {\n        fetchNotes().then(notesRaw => {\n          setnotesRaw(notesRaw)\n        })\n        onSuccess && onSuccess()\n      })\n      .catch(error => onError && onError(error))\n      .finally(() => onFinally && onFinally())\n  }\n\n  const notes: NoteProps[] = notesRaw.map(note => ({\n    id: note.id,\n    title: note.title,\n    categories: note.categories.split(' ').map(category => ({\n      id: `category-${category}`,\n      name: category,\n    })),\n    content: note.content,\n    abstract: note.abstract || '',\n    lastUpdate: note.lastUpdate || 0,\n  }))\n\n  // TODO EXTRA: 6-2 create context provider\n  return (\n    <NoteContext.Provider value={{ handleDelete }}>\n      <NoteCollectionComponent notes={notes} onCreate={handleCreate} />\n    </NoteContext.Provider>\n  )\n}\n\nexport default NoteCollection\n","import React from 'react'\nimport NoteCollection from './containers/NoteCollection'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container py-5\" id=\"App\">\n      <h1 className=\"mb-5\">\n        <i className=\"fas fa-book mr-2\" />\n        <span>Note Book</span>\n      </h1>\n\n      <NoteCollection />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}